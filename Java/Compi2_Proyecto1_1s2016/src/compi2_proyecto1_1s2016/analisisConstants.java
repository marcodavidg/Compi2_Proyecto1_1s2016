/* Generated By:JavaCC: Do not edit this line. analisisConstants.java */
/* Nombre del analizador */

/* codigo Java */
package compi2_proyecto1_1s2016;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface analisisConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int comillaT = 1;
  /** RegularExpression Id. */
  int switchT = 2;
  /** RegularExpression Id. */
  int trueT = 3;
  /** RegularExpression Id. */
  int falseT = 4;
  /** RegularExpression Id. */
  int thenT = 5;
  /** RegularExpression Id. */
  int loopT = 6;
  /** RegularExpression Id. */
  int endLoopT = 7;
  /** RegularExpression Id. */
  int doT = 8;
  /** RegularExpression Id. */
  int returnT = 9;
  /** RegularExpression Id. */
  int untilT = 10;
  /** RegularExpression Id. */
  int endSwitchT = 11;
  /** RegularExpression Id. */
  int endWhileT = 12;
  /** RegularExpression Id. */
  int endIfT = 13;
  /** RegularExpression Id. */
  int notT = 14;
  /** RegularExpression Id. */
  int andT = 15;
  /** RegularExpression Id. */
  int writeT = 16;
  /** RegularExpression Id. */
  int subT = 17;
  /** RegularExpression Id. */
  int resultT = 18;
  /** RegularExpression Id. */
  int endT = 19;
  /** RegularExpression Id. */
  int functionT = 20;
  /** RegularExpression Id. */
  int orT = 21;
  /** RegularExpression Id. */
  int forT = 22;
  /** RegularExpression Id. */
  int toT = 23;
  /** RegularExpression Id. */
  int stepT = 24;
  /** RegularExpression Id. */
  int caseT = 25;
  /** RegularExpression Id. */
  int defaultT = 26;
  /** RegularExpression Id. */
  int nextT = 27;
  /** RegularExpression Id. */
  int xorT = 28;
  /** RegularExpression Id. */
  int asToken = 29;
  /** RegularExpression Id. */
  int whileT = 30;
  /** RegularExpression Id. */
  int breakT = 31;
  /** RegularExpression Id. */
  int ifT = 32;
  /** RegularExpression Id. */
  int elseifT = 33;
  /** RegularExpression Id. */
  int cierraAccionT = 34;
  /** RegularExpression Id. */
  int abreAccionT = 35;
  /** RegularExpression Id. */
  int elseT = 36;
  /** RegularExpression Id. */
  int doubleT = 37;
  /** RegularExpression Id. */
  int intT = 38;
  /** RegularExpression Id. */
  int stringT = 39;
  /** RegularExpression Id. */
  int charT = 40;
  /** RegularExpression Id. */
  int boolT = 41;
  /** RegularExpression Id. */
  int floatT = 42;
  /** RegularExpression Id. */
  int raizT = 43;
  /** RegularExpression Id. */
  int puntoReglaT = 44;
  /** RegularExpression Id. */
  int terminalT = 45;
  /** RegularExpression Id. */
  int noterminalT = 46;
  /** RegularExpression Id. */
  int registrarPrecedenciaT = 47;
  /** RegularExpression Id. */
  int asociatividadIzqT = 48;
  /** RegularExpression Id. */
  int asociatividadDerT = 49;
  /** RegularExpression Id. */
  int resultTNum = 50;
  /** RegularExpression Id. */
  int DEC = 51;
  /** RegularExpression Id. */
  int NUM = 52;
  /** RegularExpression Id. */
  int CHAR = 53;
  /** RegularExpression Id. */
  int identifier = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\\"\"",
    "\"switch\"",
    "\"true\"",
    "\"false\"",
    "\"then\"",
    "\"loop\"",
    "\"end loop\"",
    "\"do\"",
    "\"return\"",
    "\"until\"",
    "\"end switch\"",
    "\"end while\"",
    "\"end if\"",
    "\"not\"",
    "\"and\"",
    "\"write\"",
    "\"sub\"",
    "\"RESULT\"",
    "\"end\"",
    "\"function\"",
    "\"or\"",
    "\"for\"",
    "\"to\"",
    "\"step\"",
    "\"case\"",
    "\"default\"",
    "\"next\"",
    "\"xor\"",
    "\"as\"",
    "\"while\"",
    "\"break\"",
    "\"if\"",
    "\"elseif\"",
    "\"::>\"",
    "\"<::\"",
    "\"else\"",
    "\"double\"",
    "\"int\"",
    "\"string\"",
    "\"char\"",
    "\"bool\"",
    "\"float\"",
    "\"raiz\"",
    "\".Regla\"",
    "\"terminal\"",
    "\"noterminal\"",
    "\"registrarPrecedencia\"",
    "\"asociatividad.izq\"",
    "\"asociatividad.der\"",
    "<resultTNum>",
    "<DEC>",
    "<NUM>",
    "<CHAR>",
    "<identifier>",
    "<token of kind 55>",
    "<token of kind 56>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "\"%%\"",
    "\"=\"",
    "\"+\"",
    "\"|\"",
    "\";\"",
    "\"++\"",
    "\"--\"",
    "\"(\"",
    "\",\"",
    "\")\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"!=\"",
    "\"==\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\".\"",
    "\"\\\'\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
  };

}
