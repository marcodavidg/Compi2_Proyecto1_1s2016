/* analisis.java */
/* Generated By:JavaCC: Do not edit this line. analisis.java */
                       /* Nombre del analizador */

/* codigo Java */
package compi2_proyecto1_1s2016;

import java.util.ArrayList;

public class analisis implements analisisConstants {
  public String ambitoActual = "";

/*
TOKEN_MGR_DECLS : {
     código_JAVA
}
*/

/*Especificación Sintáctica*/
  final public void Input() throws ParseException {Compi2_Proyecto1_1s2016.Precedencias = new ArrayList<Precedencia>();
    Compi2_Proyecto1_1s2016.Tokens = new ArrayList<TokenCadenaEntrada>();
    Compi2_Proyecto1_1s2016.auxConjuntos = new ArrayList<String>();
    Compi2_Proyecto1_1s2016.TablaTransiciones = new ArrayList<itemTabla>();
    Compi2_Proyecto1_1s2016.inicial = null;
    Compi2_Proyecto1_1s2016.Conjuntos = new ArrayList<Conjunto>();
    Compi2_Proyecto1_1s2016.TablaSimbolos = new ArrayList<Simbolo>();
    Compi2_Proyecto1_1s2016.Terminales = new ArrayList<Terminal>();
    Compi2_Proyecto1_1s2016.NoTerminales = new ArrayList<NoTerminal>();
    Compi2_Proyecto1_1s2016.auxIr_A = new ArrayList<String>();
    Compi2_Proyecto1_1s2016.cadenaReturn = "";
    Compi2_Proyecto1_1s2016.cadenaErrores = "";
    S();
    jj_consume_token(0);
  }

  final public void S() throws ParseException {
    jj_consume_token(61);
    DECLARACIONES_GRAMATICA();
    jj_consume_token(61);
    CODIGO();
    jj_consume_token(61);
  }

  final public void DECLARACIONES_GRAMATICA() throws ParseException {
    DECLARACIONCES();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case registrarPrecedenciaT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      PRECEDENCIA();
    }
    INICIAL();
    GRAMATICA();
Compi2_Proyecto1_1s2016.LR1();
  }

  final public void GRAMATICA() throws ParseException {Token t; NoTerminal origen;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case identifier:{
        t = jj_consume_token(identifier);
        break;
        }
      case CHAR:{
        t = jj_consume_token(CHAR);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
origen = Compi2_Proyecto1_1s2016.getNoTerminal(t.image);
      if(origen == null) {
        System.out.println("Error!! El terminal / no terminal " + t.image + " no existe.");
      } else {
      //System.out.println("origen: " + origen.nombre);
      }
      jj_consume_token(puntoReglaT);
      jj_consume_token(62);
      PRODUCCION(origen);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAR:
      case identifier:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
  }

  final public void PRODUCCION(NoTerminal origen) throws ParseException {Object temp; Token t; nodoAST nodo = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case identifier:{
      t = jj_consume_token(identifier);
      break;
      }
    case CHAR:{
      t = jj_consume_token(CHAR);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
nodo = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case abreAccionT:{
      jj_consume_token(abreAccionT);
      nodo = ACCION();
      jj_consume_token(cierraAccionT);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
origen.addDerivacion();
      temp = Compi2_Proyecto1_1s2016.getObject(t.image);
      if(temp != null) {
        origen.addHijo(temp, nodo);
      } else {
        System.out.println("Error!! El terminal / no terminal " + t.image + " no existe.");
      }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 63:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(63);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case identifier:{
        t = jj_consume_token(identifier);
        break;
        }
      case CHAR:{
        t = jj_consume_token(CHAR);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
nodo = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case abreAccionT:{
        jj_consume_token(abreAccionT);
        nodo = ACCION();
        jj_consume_token(cierraAccionT);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
temp = Compi2_Proyecto1_1s2016.getObject(t.image);
        if(temp != null){
          origen.addHijo(temp, nodo);
        }else{
          System.out.println("Error!! El terminal / no terminal " + t.image + " no existe.");
        }
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 64:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(64);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case identifier:{
        t = jj_consume_token(identifier);
        break;
        }
      case CHAR:{
        t = jj_consume_token(CHAR);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
nodo = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case abreAccionT:{
        jj_consume_token(abreAccionT);
        nodo = ACCION();
        jj_consume_token(cierraAccionT);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
origen.addDerivacion();
        temp = Compi2_Proyecto1_1s2016.getObject(t.image);
        if(temp != null){
          origen.addHijo(temp, nodo);
        }else{
          System.out.println("Error!! El terminal / no terminal " + t.image + " no existe.");
        }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 63:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(63);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case identifier:{
          t = jj_consume_token(identifier);
          break;
          }
        case CHAR:{
          t = jj_consume_token(CHAR);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
nodo = null;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case abreAccionT:{
          jj_consume_token(abreAccionT);
          nodo = ACCION();
          jj_consume_token(cierraAccionT);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
temp = Compi2_Proyecto1_1s2016.getObject(t.image);
          if(temp != null){
            origen.addHijo(temp, nodo);
          }else{
            System.out.println("Error!! El terminal / no terminal " + t.image + " no existe.");
          }
      }
    }
    jj_consume_token(65);
  }

  final public nodoAST ACCION() throws ParseException {nodoAST n3 = null, n1= null, n2 = null;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case writeT:{
        n1 = WRITE();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        if (jj_2_1(2147483647)) {
          n3 = K();
          jj_consume_token(66);
System.out.println("++");
        n1 = new nodoAST("++", "aumento", null, n3);
        } else if (jj_2_2(2147483647)) {
          n3 = K();
          jj_consume_token(67);
System.out.println("--");
        n1 = new nodoAST("--", "decremento", null, n3);
        } else if (jj_2_3(2147483647)) {
          n1 = BUCLES();
        } else if (jj_2_4(2147483647)) {
          n1 = ASIGNACION();
        } else if (jj_2_5(2147483647)) {
          n1 = DECLARACION();
        } else if (jj_2_6(2147483647)) {
          n1 = FLUJO();
        } else if (jj_2_7(2147483647)) {
          n1 = K();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
if(n2 == null){
        n2 = new nodoAST("body", "body", null, n1);
      }else{
        n2.addHijo(n1);
      }
      jj_consume_token(65);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comillaT:
      case switchT:
      case trueT:
      case falseT:
      case loopT:
      case doT:
      case writeT:
      case forT:
      case whileT:
      case ifT:
      case resultTNum:
      case DEC:
      case NUM:
      case CHAR:
      case identifier:
      case 68:
      case 82:
      case 83:
      case 85:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
    }
{if ("" != null) return n2;}
    throw new Error("Missing return statement in function");
  }

  final public void INICIAL() throws ParseException {Token t;
    jj_consume_token(raizT);
    jj_consume_token(62);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case identifier:{
      t = jj_consume_token(identifier);
      break;
      }
    case CHAR:{
      t = jj_consume_token(CHAR);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
Compi2_Proyecto1_1s2016.setInicial(t.image);
    jj_consume_token(65);
  }

  final public void PRECEDENCIA() throws ParseException {Token valor; int asociatividad = -1; Token t; Precedencia temp; ArrayList<String> hijos = new ArrayList<String>();
    jj_consume_token(registrarPrecedenciaT);
    jj_consume_token(68);
    valor = jj_consume_token(NUM);
    jj_consume_token(69);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case asociatividadIzqT:
    case asociatividadDerT:{
      asociatividad = ASOCIATIVIDAD();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case identifier:{
      t = jj_consume_token(identifier);
      break;
      }
    case CHAR:{
      t = jj_consume_token(CHAR);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
hijos.add(t.image);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 69:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      jj_consume_token(69);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case identifier:{
        t = jj_consume_token(identifier);
        break;
        }
      case CHAR:{
        t = jj_consume_token(CHAR);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
hijos.add(t.image);
    }
temp = new Precedencia(Integer.parseInt(valor.image), asociatividad, hijos);
    jj_consume_token(70);
    jj_consume_token(65);
Compi2_Proyecto1_1s2016.showPrecedencias();
  }

  final public int ASOCIATIVIDAD() throws ParseException {int asociatividad = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case asociatividadIzqT:{
      jj_consume_token(asociatividadIzqT);
asociatividad = 0; System.out.println("izq");
      break;
      }
    case asociatividadDerT:{
      jj_consume_token(asociatividadDerT);
asociatividad = 1; System.out.println("der");
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(69);
{if ("" != null) return asociatividad;}
    throw new Error("Missing return statement in function");
  }

  final public void DECLARACIONCES() throws ParseException {int tipoProduccion, tipo;
  Token t;
  ArrayList<Terminal> ultimosT = new ArrayList<Terminal>();
  ArrayList<NoTerminal> ultimosNT = new ArrayList<NoTerminal>();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case terminalT:{
        t = jj_consume_token(terminalT);
ultimosT = new ArrayList<Terminal>(); tipo = 0;
        break;
        }
      case noterminalT:{
        t = jj_consume_token(noterminalT);
ultimosNT = new ArrayList<NoTerminal>(); tipo = 1;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case identifier:{
        t = jj_consume_token(identifier);
        break;
        }
      case CHAR:{
        t = jj_consume_token(CHAR);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(tipo == 0){
        Terminal temp = new Terminal(t.image);
        ultimosT.add(temp);
        Compi2_Proyecto1_1s2016.addTerminal(temp);
      } else {
        NoTerminal temp = new NoTerminal(t.image);
        ultimosNT.add(temp);
        Compi2_Proyecto1_1s2016.addNoTerminal(temp);
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 69:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_9;
        }
        jj_consume_token(69);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case identifier:{
          t = jj_consume_token(identifier);
          break;
          }
        case CHAR:{
          t = jj_consume_token(CHAR);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
if(tipo == 0){
          Terminal temp = new Terminal(t.image);
          ultimosT.add(temp);
          Compi2_Proyecto1_1s2016.addTerminal(temp);
        } else {
          NoTerminal temp = new NoTerminal(t.image);
          ultimosNT.add(temp);
          Compi2_Proyecto1_1s2016.addNoTerminal(temp);
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case asToken:{
        jj_consume_token(asToken);
        tipoProduccion = TIPO();
if (tipo == 0) {
            for (Terminal ultimosT1 : ultimosT) {
                ultimosT1.setTipoReturn(tipoProduccion);
            }
        } else {
            for (NoTerminal ultimosNT1 : ultimosNT) {
                ultimosNT1.setTipoReturn(tipoProduccion);
            }
        }
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(65);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case terminalT:
      case noterminalT:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_8;
      }
    }
for (NoTerminal n: Compi2_Proyecto1_1s2016.NoTerminales) {
        System.out.println("nombreNT: " + n.nombre + ". " + n.tipoReturn);
    }
    for (Terminal n: Compi2_Proyecto1_1s2016.Terminales) {
        System.out.println("nombreT: " + n.nombre + ". " + n.tipoReturn);
    }
  }

  final public nodoAST CODIGO() throws ParseException {Token t; int tipo; nodoAST nodo = null;
    nodo = SENTENCIA();
nodo.ejecutar();
    Graphviz g = new Graphviz();
    g.graficarAST(nodo);
    // for(Simbolo a: Compi2_Proyecto1_1s2016.TablaSimbolos){
      // System.out.println(a.nombre + a.ambito + a.fila + a.columna + a.tipo);
    // }
    {if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST SENTENCIA() throws ParseException {nodoAST n3 = null, n1 = null, nodo = null;
    label_10:
    while (true) {
      if (jj_2_8(2147483647)) {
        n3 = K();
        jj_consume_token(66);
System.out.println("++");
        n1 = new nodoAST("++", "aumento", null, n3);
      } else if (jj_2_9(2147483647)) {
        n3 = K();
        jj_consume_token(67);
System.out.println("--");
        n1 = new nodoAST("--", "decremento", null, n3);
      } else if (jj_2_10(2147483647)) {
        n1 = DECLARACION();
      } else if (jj_2_11(2147483647)) {
        n1 = BUCLES();
      } else if (jj_2_12(2147483647)) {
        n1 = WRITE();
      } else if (jj_2_13(2147483647)) {
        n1 = ASIGNACION();
      } else if (jj_2_14(2147483647)) {
        n1 = DECLARACION();
      } else if (jj_2_15(2147483647)) {
        n1 = FLUJO();
      } else if (jj_2_16(2147483647)) {
        n1 = METODO_FUNCION();
      } else if (jj_2_17(2147483647)) {
        n1 = K();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
if(nodo == null){
        nodo = new nodoAST("sentencias", "sentencias", null, n1);
      }else{
        nodo.addHijo(n1);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comillaT:
      case switchT:
      case trueT:
      case falseT:
      case loopT:
      case doT:
      case writeT:
      case subT:
      case functionT:
      case forT:
      case whileT:
      case ifT:
      case resultTNum:
      case DEC:
      case NUM:
      case CHAR:
      case identifier:
      case 68:
      case 82:
      case 83:
      case 85:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST FLUJO() throws ParseException {nodoAST nodo = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ifT:{
      nodo = IF_STATEMENT();
      break;
      }
    case switchT:{
      nodo = SWITCH_STATEMENT();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST IF_STATEMENT() throws ParseException {nodoAST n3 = null, nodo = null, n1 = null, n2 = null, condicion = null;
    jj_consume_token(ifT);
    condicion = EXPRESION();
    jj_consume_token(thenT);
    label_11:
    while (true) {
      if (jj_2_18(2147483647)) {
        n3 = K();
        jj_consume_token(66);
System.out.println("++");
        n1 = new nodoAST("++", "aumento", null, n3);
      } else if (jj_2_19(2147483647)) {
        n3 = K();
        jj_consume_token(67);
System.out.println("--");
        n1 = new nodoAST("--", "decremento", null, n3);
      } else if (jj_2_20(2147483647)) {
        n1 = BUCLES();
      } else if (jj_2_21(2147483647)) {
        n1 = WRITE();
      } else if (jj_2_22(2147483647)) {
        n1 = ASIGNACION();
      } else if (jj_2_23(2147483647)) {
        n1 = DECLARACION();
      } else if (jj_2_24(2147483647)) {
        n1 = FLUJO();
      } else if (jj_2_25(2147483647)) {
        n1 = METODO_FUNCION();
      } else if (jj_2_26(2147483647)) {
        n1 = K();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case returnT:{
          jj_consume_token(returnT);
          n3 = EXPRESION();
n1 = new nodoAST("return", "return", null, n3);
          break;
          }
        case breakT:{
          jj_consume_token(breakT);
n1 = new nodoAST("break", "break", null);
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
if(n2 == null){
        n2 = new nodoAST("body", "body", null, n1);
      }else{
        n2.addHijo(n1);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comillaT:
      case switchT:
      case trueT:
      case falseT:
      case loopT:
      case doT:
      case returnT:
      case writeT:
      case subT:
      case functionT:
      case forT:
      case whileT:
      case breakT:
      case ifT:
      case resultTNum:
      case DEC:
      case NUM:
      case CHAR:
      case identifier:
      case 68:
      case 82:
      case 83:
      case 85:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_11;
      }
    }
nodo = new nodoAST("if", "if", null, condicion, n2);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case elseifT:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_12;
      }
      jj_consume_token(elseifT);
n2 = null;
      condicion = EXPRESION();
      jj_consume_token(thenT);
      label_13:
      while (true) {
        if (jj_2_27(2147483647)) {
          n3 = K();
          jj_consume_token(66);
System.out.println("++");
          n1 = new nodoAST("++", "aumento", null, n3);
        } else if (jj_2_28(2147483647)) {
          n3 = K();
          jj_consume_token(67);
System.out.println("--");
          n1 = new nodoAST("--", "decremento", null, n3);
        } else if (jj_2_29(2147483647)) {
          n1 = BUCLES();
        } else if (jj_2_30(2147483647)) {
          n1 = WRITE();
        } else if (jj_2_31(2147483647)) {
          n1 = ASIGNACION();
        } else if (jj_2_32(2147483647)) {
          n1 = DECLARACION();
        } else if (jj_2_33(2147483647)) {
          n1 = FLUJO();
        } else if (jj_2_34(2147483647)) {
          n1 = METODO_FUNCION();
        } else if (jj_2_35(2147483647)) {
          n1 = K();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case returnT:{
            jj_consume_token(returnT);
            n3 = EXPRESION();
n1 = new nodoAST("return", "return", null, n3);
            break;
            }
          case breakT:{
            jj_consume_token(breakT);
n1 = new nodoAST("break", "break", null);
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
if(n2 == null){
          n2 = new nodoAST("body", "body", null, n1);
        }else{
          n2.addHijo(n1);
      }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case comillaT:
        case switchT:
        case trueT:
        case falseT:
        case loopT:
        case doT:
        case returnT:
        case writeT:
        case subT:
        case functionT:
        case forT:
        case whileT:
        case breakT:
        case ifT:
        case resultTNum:
        case DEC:
        case NUM:
        case CHAR:
        case identifier:
        case 68:
        case 82:
        case 83:
        case 85:{
          ;
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          break label_13;
        }
      }
nodo.addHijo(new nodoAST("elseif", "elseif", null, condicion, n2));
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case elseT:{
      jj_consume_token(elseT);
n2 = null;
      label_14:
      while (true) {
        if (jj_2_36(2147483647)) {
          n3 = K();
          jj_consume_token(66);
System.out.println("++");
          n1 = new nodoAST("++", "aumento", null, n3);
        } else if (jj_2_37(2147483647)) {
          n3 = K();
          jj_consume_token(67);
System.out.println("--");
          n1 = new nodoAST("--", "decremento", null, n3);
        } else if (jj_2_38(2147483647)) {
          n1 = BUCLES();
        } else if (jj_2_39(2147483647)) {
          n1 = WRITE();
        } else if (jj_2_40(2147483647)) {
          n1 = ASIGNACION();
        } else if (jj_2_41(2147483647)) {
          n1 = DECLARACION();
        } else if (jj_2_42(2147483647)) {
          n1 = FLUJO();
        } else if (jj_2_43(2147483647)) {
          n1 = METODO_FUNCION();
        } else if (jj_2_44(2147483647)) {
          n1 = K();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case returnT:{
            jj_consume_token(returnT);
            n3 = EXPRESION();
n1 = new nodoAST("return", "return", null, n3);
            break;
            }
          case breakT:{
            jj_consume_token(breakT);
n1 = new nodoAST("break", "break", null);
            break;
            }
          default:
            jj_la1[35] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
if(n2 == null){
          n2 = new nodoAST("body", "body", null, n1);
        }else{
          n2.addHijo(n1);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case comillaT:
        case switchT:
        case trueT:
        case falseT:
        case loopT:
        case doT:
        case returnT:
        case writeT:
        case subT:
        case functionT:
        case forT:
        case whileT:
        case breakT:
        case ifT:
        case resultTNum:
        case DEC:
        case NUM:
        case CHAR:
        case identifier:
        case 68:
        case 82:
        case 83:
        case 85:{
          ;
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          break label_14;
        }
      }
nodo.addHijo(new nodoAST("else", "else", null, n2));
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    jj_consume_token(endIfT);
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST SWITCH_STATEMENT() throws ParseException {nodoAST n2 = null, n1 = null, nodo = null, condicion = null;
    jj_consume_token(switchT);
    condicion = EXPRESION();
    label_15:
    while (true) {
      n1 = CASO();
if(n2 == null){
        n2 = new nodoAST("cases", "cases", null, n1);
      }else{
        n2.addHijo(n1);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case caseT:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_15;
      }
    }
    jj_consume_token(endSwitchT);
{if ("" != null) return new nodoAST("switch","switch", null, condicion, n2);}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST CASO() throws ParseException {nodoAST n3 = null, condicion = null, nodo = null, n2 = null, n1 = null;
    jj_consume_token(caseT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comillaT:
    case trueT:
    case falseT:
    case notT:
    case resultTNum:
    case DEC:
    case NUM:
    case CHAR:
    case identifier:
    case 68:
    case 82:
    case 83:
    case 85:{
      condicion = EXPRESION();
      break;
      }
    case defaultT:{
      jj_consume_token(defaultT);
condicion = new nodoAST("default", "default", null);
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_16:
    while (true) {
      if (jj_2_45(2147483647)) {
        n3 = K();
        jj_consume_token(66);
System.out.println("++");
        n1 = new nodoAST("++", "aumento", null, n3);
      } else if (jj_2_46(2147483647)) {
        n3 = K();
        jj_consume_token(67);
System.out.println("--");
        n1 = new nodoAST("--", "decremento", null, n3);
      } else if (jj_2_47(2147483647)) {
        n1 = BUCLES();
      } else if (jj_2_48(2147483647)) {
        n1 = WRITE();
      } else if (jj_2_49(2147483647)) {
        n1 = ASIGNACION();
      } else if (jj_2_50(2147483647)) {
        n1 = DECLARACION();
      } else if (jj_2_51(2147483647)) {
        n1 = FLUJO();
      } else if (jj_2_52(2147483647)) {
        n1 = METODO_FUNCION();
      } else if (jj_2_53(2147483647)) {
        n1 = K();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case returnT:{
          jj_consume_token(returnT);
          n3 = EXPRESION();
n1 = new nodoAST("return", "return", null, n3);
          break;
          }
        case breakT:{
          jj_consume_token(breakT);
n1 = new nodoAST("break", "break", null);
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
if(n2 == null){
        n2 = new nodoAST("body", "body", null, n1);
      }else{
        n2.addHijo(n1);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comillaT:
      case switchT:
      case trueT:
      case falseT:
      case loopT:
      case doT:
      case returnT:
      case writeT:
      case subT:
      case functionT:
      case forT:
      case whileT:
      case breakT:
      case ifT:
      case resultTNum:
      case DEC:
      case NUM:
      case CHAR:
      case identifier:
      case 68:
      case 82:
      case 83:
      case 85:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_16;
      }
    }
{if ("" != null) return new nodoAST("case","case", null, condicion, n2);}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST DECLARACION() throws ParseException {ArrayList<String> listaIDs = new ArrayList<String>();
  Token t1, t2;
  int tipo, contadorDimensiones = 0;
  nodoAST n1 = null, n2 = null, nodo = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case identifier:{
      t1 = jj_consume_token(identifier);
      break;
      }
    case CHAR:{
      t1 = jj_consume_token(CHAR);
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
System.out.println(t1.image + "**");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 68:
    case 69:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 69:{
        label_17:
        while (true) {
          jj_consume_token(69);
if(n1 == null) {
          n1 = new nodoAST("variables","variables", null, new nodoAST(t1.image, "identifier", t1.image));
        }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case identifier:{
            t2 = jj_consume_token(identifier);
            break;
            }
          case CHAR:{
            t2 = jj_consume_token(CHAR);
            break;
            }
          default:
            jj_la1[43] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
n1.addHijo(new nodoAST(t2.image, "identifier", t2.image));
System.out.println(t2.image + "**");
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 69:{
            ;
            break;
            }
          default:
            jj_la1[44] = jj_gen;
            break label_17;
          }
        }
        break;
        }
      case 68:{
        label_18:
        while (true) {
          jj_consume_token(68);
          t2 = jj_consume_token(NUM);
          jj_consume_token(70);
if(n2 == null) {
          n2 = new nodoAST("[]", "arreglo", null, new nodoAST(t1.image, "identifier", t1.image), new nodoAST(t2.image, "dimension", Integer.parseInt(t2.image)));
        }else{
          n2.addHijo(new nodoAST(t2.image, "dimension", Integer.parseInt(t2.image)));
        }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 68:{
            ;
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            break label_18;
          }
        }
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    jj_consume_token(asToken);
    tipo = TIPO();
if(n1 == null){
      n1 = new nodoAST("variables","variables", null, new nodoAST(t1.image, "identifier", t1.image));
    }
    if(n2 != null){
      nodo = new nodoAST("declaracion", "declaracion", null, n2, new nodoAST(tipo + "", "tipo", tipo));
    }else{
      nodo = new nodoAST("declaracion", "declaracion", null, n1, new nodoAST(tipo + "", "tipo", tipo));
    }
    {if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST EXPRESION() throws ParseException {nodoAST nodo, n1, n2 = null;
    //>, <, >=, <=, ==, !=, OR, XOR, AND, NOT
      //suma, resta, multiplicacion, division, potencia, aumento, decremento
      nodo = E();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case orT:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_19;
      }
      jj_consume_token(orT);
      n1 = E();
System.out.println("or");
      n2 = nodo;
      nodo = new nodoAST("or", "or", null, n2, n1);
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST E() throws ParseException {nodoAST nodo, n1, n2 = null;
    nodo = F();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case xorT:{
        ;
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        break label_20;
      }
      jj_consume_token(xorT);
      n1 = F();
System.out.println("xor");
      n2 = nodo;
      nodo = new nodoAST("xor", "xor", null, n2, n1);
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST F() throws ParseException {nodoAST nodo, n1, n2 = null;
    nodo = G();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case andT:{
        ;
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        break label_21;
      }
      jj_consume_token(andT);
      n1 = G();
System.out.println("and");
      n2 = nodo;
      nodo = new nodoAST("and", "and", null, n2, n1);
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST G() throws ParseException {nodoAST nodo, n2 = null; int flag = 0;
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case notT:{
        ;
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        break label_22;
      }
      jj_consume_token(notT);
flag++;
    }
    nodo = FIX();
if(flag % 2 != 0){
      System.out.println("not -> flag: " + flag);
      n2 = nodo;
      nodo = new nodoAST("not", "not", null, n2);
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST FIX() throws ParseException {nodoAST nodo, n1, n2 = null;
    nodo = A();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:{
        ;
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 71:{
        jj_consume_token(71);
        n1 = A();
System.out.println(">");
      n2 = nodo;
      nodo = new nodoAST(">", "mayor", null, n2, n1);
        break;
        }
      case 72:{
        jj_consume_token(72);
        n1 = A();
System.out.println("<");
      n2 = nodo;
      nodo = new nodoAST("<", "menor", null, n2, n1);
        break;
        }
      case 73:{
        jj_consume_token(73);
        n1 = A();
System.out.println(">=");
      n2 = nodo;
      nodo = new nodoAST(">=", "mayorigual", null, n2, n1);
        break;
        }
      case 74:{
        jj_consume_token(74);
        n1 = A();
System.out.println("<=");
      n2 = nodo;
      nodo = new nodoAST("<=", "menorigual", null, n2, n1);
        break;
        }
      case 75:{
        jj_consume_token(75);
        n1 = A();
System.out.println("!=");
      n2 = nodo;
      nodo = new nodoAST("!=", "diferente", null, n2, n1);
        break;
        }
      case 76:{
        jj_consume_token(76);
        n1 = A();
System.out.println("==");
      n2 = nodo;
      nodo = new nodoAST("==", "igual", null, n2, n1);
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST A() throws ParseException {nodoAST nodo, n2 = null;
    if (jj_2_54(2147483647)) {
      nodo = K();
      jj_consume_token(66);
System.out.println("++");
      n2 = nodo;
      nodo = new nodoAST("++", "aumento", null, n2);
    } else if (jj_2_55(2147483647)) {
      nodo = K();
      jj_consume_token(67);
System.out.println("--");
      n2 = nodo;
      nodo = new nodoAST("--", "decremento", null, n2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comillaT:
      case trueT:
      case falseT:
      case resultTNum:
      case DEC:
      case NUM:
      case CHAR:
      case identifier:
      case 68:
      case 82:
      case 83:
      case 85:{
        nodo = H();
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST H() throws ParseException {nodoAST nodo, n2, n1 = null;
    nodo = I();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 63:
      case 77:{
        ;
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 63:{
        jj_consume_token(63);
        n1 = I();
System.out.println("+");
      n2 = nodo;
      nodo = new nodoAST("+", "suma", null, n2, n1);
        break;
        }
      case 77:{
        jj_consume_token(77);
        n1 = I();
System.out.println("-");
      n2 = nodo;
      nodo = new nodoAST("-", "resta", null, n2, n1);
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST I() throws ParseException {nodoAST nodo, n2, n1 = null;
    nodo = J();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 78:
      case 79:{
        ;
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 78:{
        jj_consume_token(78);
        n1 = J();
System.out.println("*");
      n2 = nodo;
      nodo = new nodoAST("*", "multiplicacion", null, n2, n1);
        break;
        }
      case 79:{
        jj_consume_token(79);
        n1 = J();
System.out.println("/");
      n2 = nodo;
      nodo = new nodoAST("/", "division", null, n2, n1);
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST J() throws ParseException {Token t; nodoAST nodo, n1, n2 = null;
    nodo = K();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 80:{
        ;
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        break label_26;
      }
      jj_consume_token(80);
      n1 = K();
System.out.println("^");
      n2 = nodo;
      nodo = new nodoAST("^", "potencia", null, n2, n1);
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST K() throws ParseException {String texto = ""; Token taux = null, t = null; nodoAST nodo = null, n2 = null, n1 = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case resultTNum:{
      t = jj_consume_token(resultTNum);
nodo = new nodoAST("result", "result", null, new nodoAST(t.image.substring(6), "num", Integer.parseInt(t.image.substring(6))));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 81:{
        jj_consume_token(81);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case identifier:{
          t = jj_consume_token(identifier);
          break;
          }
        case CHAR:{
          t = jj_consume_token(CHAR);
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
nodo.addHijo(new nodoAST(t.image, "identifier", t.image));
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[66] = jj_gen;
      if (jj_2_56(3)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case identifier:{
          t = jj_consume_token(identifier);
          break;
          }
        case CHAR:{
          t = jj_consume_token(CHAR);
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_27:
        while (true) {
          jj_consume_token(68);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case comillaT:
          case trueT:
          case falseT:
          case notT:
          case resultTNum:
          case DEC:
          case NUM:
          case CHAR:
          case identifier:
          case 68:
          case 82:
          case 83:
          case 85:{
            n1 = EXPRESION();
if(n2 == null){
                n2 = new nodoAST("items", "items", null, n1);
              }else{
                n2.addHijo(n1);
              }
            label_28:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case 69:{
                ;
                break;
                }
              default:
                jj_la1[63] = jj_gen;
                break label_28;
              }
              jj_consume_token(69);
              n1 = EXPRESION();
if(n2 == null){
                n2 = new nodoAST("items", "items", null, n1);
              }else{
                n2.addHijo(n1);
              }
            }
            break;
            }
          default:
            jj_la1[64] = jj_gen;
            ;
          }
          jj_consume_token(70);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 68:{
            ;
            break;
            }
          default:
            jj_la1[65] = jj_gen;
            break label_27;
          }
        }
nodo = new nodoAST("arreglo/funcion", "arreglo/funcion", null, new nodoAST(t.image, "identifier", t.image), n2);
      } else if (jj_2_57(2147483647)) {
        t = jj_consume_token(CHAR);
nodo = new nodoAST(t.image, "identifier", t.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case trueT:{
          jj_consume_token(trueT);
nodo = new nodoAST("true", "true", true);
          break;
          }
        case falseT:{
          jj_consume_token(falseT);
nodo = new nodoAST("false", "false", false);
          break;
          }
        case 82:{
          jj_consume_token(82);
          t = jj_consume_token(CHAR);
          jj_consume_token(82);
nodo = new nodoAST(t.image, "char", t.image.charAt(0));
          break;
          }
        default:
          jj_la1[67] = jj_gen;
          if (jj_2_58(2147483647)) {
            texto = LISTA_STRINGS();
nodo = new nodoAST(texto, "string", texto);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NUM:{
              t = jj_consume_token(NUM);
nodo = new nodoAST(t.image, "num", Integer.parseInt(t.image));
              break;
              }
            case DEC:{
              t = jj_consume_token(DEC);
nodo = new nodoAST(t.image, "double", Double.parseDouble(t.image));
              break;
              }
            case identifier:{
              t = jj_consume_token(identifier);
nodo = new nodoAST(t.image, "identifier", t.image);
              break;
              }
            case 68:
            case 83:
            case 85:{
              nodo = L();
              break;
              }
            default:
              jj_la1[68] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
if(t != null){
      System.out.println(t.image + "-+");
    }
    {if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public String LISTA_STRINGS() throws ParseException {String texto = ""; Token t;
    jj_consume_token(comillaT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case identifier:{
      t = jj_consume_token(identifier);
      break;
      }
    case CHAR:{
      t = jj_consume_token(CHAR);
      break;
      }
    case switchT:{
      t = jj_consume_token(switchT);
      break;
      }
    case trueT:{
      t = jj_consume_token(trueT);
      break;
      }
    case falseT:{
      t = jj_consume_token(falseT);
      break;
      }
    case thenT:{
      t = jj_consume_token(thenT);
      break;
      }
    case loopT:{
      t = jj_consume_token(loopT);
      break;
      }
    case endLoopT:{
      t = jj_consume_token(endLoopT);
      break;
      }
    case doT:{
      t = jj_consume_token(doT);
      break;
      }
    case untilT:{
      t = jj_consume_token(untilT);
      break;
      }
    case endSwitchT:{
      t = jj_consume_token(endSwitchT);
      break;
      }
    case endWhileT:{
      t = jj_consume_token(endWhileT);
      break;
      }
    case endIfT:{
      t = jj_consume_token(endIfT);
      break;
      }
    case notT:{
      t = jj_consume_token(notT);
      break;
      }
    case andT:{
      t = jj_consume_token(andT);
      break;
      }
    case writeT:{
      t = jj_consume_token(writeT);
      break;
      }
    case subT:{
      t = jj_consume_token(subT);
      break;
      }
    case resultT:{
      t = jj_consume_token(resultT);
      break;
      }
    case endT:{
      t = jj_consume_token(endT);
      break;
      }
    case functionT:{
      t = jj_consume_token(functionT);
      break;
      }
    case orT:{
      t = jj_consume_token(orT);
      break;
      }
    case forT:{
      t = jj_consume_token(forT);
      break;
      }
    case toT:{
      t = jj_consume_token(toT);
      break;
      }
    case stepT:{
      t = jj_consume_token(stepT);
      break;
      }
    case caseT:{
      t = jj_consume_token(caseT);
      break;
      }
    case defaultT:{
      t = jj_consume_token(defaultT);
      break;
      }
    case nextT:{
      t = jj_consume_token(nextT);
      break;
      }
    case xorT:{
      t = jj_consume_token(xorT);
      break;
      }
    case asToken:{
      t = jj_consume_token(asToken);
      break;
      }
    case whileT:{
      t = jj_consume_token(whileT);
      break;
      }
    case breakT:{
      t = jj_consume_token(breakT);
      break;
      }
    case ifT:{
      t = jj_consume_token(ifT);
      break;
      }
    case elseifT:{
      t = jj_consume_token(elseifT);
      break;
      }
    case elseT:{
      t = jj_consume_token(elseT);
      break;
      }
    case doubleT:{
      t = jj_consume_token(doubleT);
      break;
      }
    case intT:{
      t = jj_consume_token(intT);
      break;
      }
    case stringT:{
      t = jj_consume_token(stringT);
      break;
      }
    case charT:{
      t = jj_consume_token(charT);
      break;
      }
    case boolT:{
      t = jj_consume_token(boolT);
      break;
      }
    case floatT:{
      t = jj_consume_token(floatT);
      break;
      }
    case raizT:{
      t = jj_consume_token(raizT);
      break;
      }
    case NUM:{
      t = jj_consume_token(NUM);
      break;
      }
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
texto = t.image;
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case switchT:
      case trueT:
      case falseT:
      case thenT:
      case loopT:
      case endLoopT:
      case doT:
      case untilT:
      case endSwitchT:
      case endWhileT:
      case endIfT:
      case notT:
      case andT:
      case writeT:
      case subT:
      case resultT:
      case endT:
      case functionT:
      case orT:
      case forT:
      case toT:
      case stepT:
      case caseT:
      case defaultT:
      case nextT:
      case xorT:
      case asToken:
      case whileT:
      case breakT:
      case ifT:
      case elseifT:
      case elseT:
      case doubleT:
      case intT:
      case stringT:
      case charT:
      case boolT:
      case floatT:
      case raizT:
      case NUM:
      case CHAR:
      case identifier:{
        ;
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case identifier:{
        t = jj_consume_token(identifier);
        break;
        }
      case CHAR:{
        t = jj_consume_token(CHAR);
        break;
        }
      case switchT:{
        t = jj_consume_token(switchT);
        break;
        }
      case trueT:{
        t = jj_consume_token(trueT);
        break;
        }
      case falseT:{
        t = jj_consume_token(falseT);
        break;
        }
      case thenT:{
        t = jj_consume_token(thenT);
        break;
        }
      case loopT:{
        t = jj_consume_token(loopT);
        break;
        }
      case endLoopT:{
        t = jj_consume_token(endLoopT);
        break;
        }
      case doT:{
        t = jj_consume_token(doT);
        break;
        }
      case untilT:{
        t = jj_consume_token(untilT);
        break;
        }
      case endSwitchT:{
        t = jj_consume_token(endSwitchT);
        break;
        }
      case endWhileT:{
        t = jj_consume_token(endWhileT);
        break;
        }
      case endIfT:{
        t = jj_consume_token(endIfT);
        break;
        }
      case notT:{
        t = jj_consume_token(notT);
        break;
        }
      case andT:{
        t = jj_consume_token(andT);
        break;
        }
      case writeT:{
        t = jj_consume_token(writeT);
        break;
        }
      case subT:{
        t = jj_consume_token(subT);
        break;
        }
      case resultT:{
        t = jj_consume_token(resultT);
        break;
        }
      case endT:{
        t = jj_consume_token(endT);
        break;
        }
      case functionT:{
        t = jj_consume_token(functionT);
        break;
        }
      case orT:{
        t = jj_consume_token(orT);
        break;
        }
      case forT:{
        t = jj_consume_token(forT);
        break;
        }
      case toT:{
        t = jj_consume_token(toT);
        break;
        }
      case stepT:{
        t = jj_consume_token(stepT);
        break;
        }
      case caseT:{
        t = jj_consume_token(caseT);
        break;
        }
      case defaultT:{
        t = jj_consume_token(defaultT);
        break;
        }
      case nextT:{
        t = jj_consume_token(nextT);
        break;
        }
      case xorT:{
        t = jj_consume_token(xorT);
        break;
        }
      case asToken:{
        t = jj_consume_token(asToken);
        break;
        }
      case whileT:{
        t = jj_consume_token(whileT);
        break;
        }
      case breakT:{
        t = jj_consume_token(breakT);
        break;
        }
      case ifT:{
        t = jj_consume_token(ifT);
        break;
        }
      case elseifT:{
        t = jj_consume_token(elseifT);
        break;
        }
      case elseT:{
        t = jj_consume_token(elseT);
        break;
        }
      case doubleT:{
        t = jj_consume_token(doubleT);
        break;
        }
      case intT:{
        t = jj_consume_token(intT);
        break;
        }
      case stringT:{
        t = jj_consume_token(stringT);
        break;
        }
      case charT:{
        t = jj_consume_token(charT);
        break;
        }
      case boolT:{
        t = jj_consume_token(boolT);
        break;
        }
      case floatT:{
        t = jj_consume_token(floatT);
        break;
        }
      case raizT:{
        t = jj_consume_token(raizT);
        break;
        }
      case NUM:{
        t = jj_consume_token(NUM);
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
texto += " " + t.image;
    }
    jj_consume_token(comillaT);
System.out.println("El texto: " + texto);
    {if ("" != null) return texto;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST L() throws ParseException {Token t; nodoAST nodo = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 83:{
      jj_consume_token(83);
      nodo = EXPRESION();
      jj_consume_token(84);
System.out.println("{}"); {if ("" != null) return nodo;}
      break;
      }
    case 68:
    case 85:{
      nodo = M();
{if ("" != null) return nodo;}
      break;
      }
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST M() throws ParseException {Token t; nodoAST nodo = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 85:{
      jj_consume_token(85);
      nodo = EXPRESION();
      jj_consume_token(86);
System.out.println("[]"); {if ("" != null) return nodo;}
      break;
      }
    case 68:{
      nodo = N();
{if ("" != null) return nodo;}
      break;
      }
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST N() throws ParseException {Token t; nodoAST nodo = null;
    jj_consume_token(68);
    nodo = EXPRESION();
    jj_consume_token(70);
System.out.println("()"); {if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST METODO_FUNCION() throws ParseException {nodoAST nodo = null;
    if (jj_2_59(2147483647)) {
      nodo = METODO();
    } else if (jj_2_60(2147483647)) {
      nodo = FUNCION();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST METODO() throws ParseException {int tipo; nodoAST n3 = null, n2 = null, nodo  = null, n1 = null; Token param = null, nombre = null;
    jj_consume_token(subT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case identifier:{
      nombre = jj_consume_token(identifier);
      break;
      }
    case CHAR:{
      nombre = jj_consume_token(CHAR);
      break;
      }
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
nodo = new nodoAST("metodo", "metodo", null, new nodoAST(nombre.image, "identifier", nombre.image));
    jj_consume_token(68);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case identifier:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case identifier:{
        param = jj_consume_token(identifier);
        break;
        }
      case CHAR:{
        param = jj_consume_token(CHAR);
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(asToken);
      tipo = TIPO();
n3 = new nodoAST("parametros", "parametros", null, new nodoAST("parametro", "parametro", null, new nodoAST(param.image, "identifier", param.image), new nodoAST(tipo + "", "tipo", tipo)));
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 69:{
          ;
          break;
          }
        default:
          jj_la1[76] = jj_gen;
          break label_30;
        }
        jj_consume_token(69);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case identifier:{
          param = jj_consume_token(identifier);
          break;
          }
        case CHAR:{
          param = jj_consume_token(CHAR);
          break;
          }
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(asToken);
        tipo = TIPO();
n3.addHijo(new nodoAST("parametro", "parametro", null, new nodoAST(param.image, "identifier", param.image), new nodoAST(tipo + "", "tipo", tipo)));
      }
nodo.addHijo(n3);
      break;
      }
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    jj_consume_token(70);
    label_31:
    while (true) {
      if (jj_2_61(2147483647)) {
        n3 = K();
        jj_consume_token(66);
System.out.println("++");
          n1 = new nodoAST("++", "aumento", null, n3);
      } else if (jj_2_62(2147483647)) {
        n3 = K();
        jj_consume_token(67);
System.out.println("--");
          n1 = new nodoAST("--", "decremento", null, n3);
      } else if (jj_2_63(2147483647)) {
        n1 = BUCLES();
      } else if (jj_2_64(2147483647)) {
        n1 = WRITE();
      } else if (jj_2_65(2147483647)) {
        n1 = ASIGNACION();
      } else if (jj_2_66(2147483647)) {
        n1 = DECLARACION();
      } else if (jj_2_67(2147483647)) {
        n1 = FLUJO();
      } else if (jj_2_68(2147483647)) {
        n1 = METODO_FUNCION();
      } else if (jj_2_69(2147483647)) {
        n1 = K();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case returnT:{
          jj_consume_token(returnT);
          n3 = EXPRESION();
n1 = new nodoAST("return", "return", null, n3);
          break;
          }
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
if(n2 == null){
        n2 = new nodoAST("body", "body", null, n1);
      }else{
        n2.addHijo(n1);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comillaT:
      case switchT:
      case trueT:
      case falseT:
      case loopT:
      case doT:
      case returnT:
      case writeT:
      case subT:
      case functionT:
      case forT:
      case whileT:
      case ifT:
      case resultTNum:
      case DEC:
      case NUM:
      case CHAR:
      case identifier:
      case 68:
      case 82:
      case 83:
      case 85:{
        ;
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        break label_31;
      }
    }
    jj_consume_token(endT);
    jj_consume_token(subT);
nodo.addHijo(n2);
    {if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST FUNCION() throws ParseException {int tipo; nodoAST n3 = null, n2 = null, nodo  = null, n1 = null; Token param = null, nombre = null;
    jj_consume_token(functionT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case identifier:{
      nombre = jj_consume_token(identifier);
      break;
      }
    case CHAR:{
      nombre = jj_consume_token(CHAR);
      break;
      }
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
nodo = new nodoAST("funcion", "funcion", null, new nodoAST(nombre.image, "identifier", nombre.image));
    jj_consume_token(68);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case identifier:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case identifier:{
        param = jj_consume_token(identifier);
        break;
        }
      case CHAR:{
        param = jj_consume_token(CHAR);
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(asToken);
      tipo = TIPO();
n3 = new nodoAST("parametros", "parametros", null, new nodoAST("parametro", "parametro", null, new nodoAST(param.image, "identifier", param.image), new nodoAST(tipo + "", "tipo", tipo)));
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 69:{
          ;
          break;
          }
        default:
          jj_la1[83] = jj_gen;
          break label_32;
        }
        jj_consume_token(69);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case identifier:{
          param = jj_consume_token(identifier);
          break;
          }
        case CHAR:{
          param = jj_consume_token(CHAR);
          break;
          }
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(asToken);
        tipo = TIPO();
n3.addHijo(new nodoAST("parametro", "parametro", null, new nodoAST(param.image, "identifier", param.image), new nodoAST(tipo + "", "tipo", tipo)));
      }
nodo.addHijo(n3);
      break;
      }
    default:
      jj_la1[85] = jj_gen;
      ;
    }
    jj_consume_token(70);
    jj_consume_token(asToken);
    tipo = TIPO();
nodo.addHijo(new nodoAST(tipo + "", "tipo", tipo));
    label_33:
    while (true) {
      if (jj_2_70(2147483647)) {
        n3 = K();
        jj_consume_token(66);
System.out.println("++");
          n1 = new nodoAST("++", "aumento", null, n3);
      } else if (jj_2_71(2147483647)) {
        n3 = K();
        jj_consume_token(67);
System.out.println("--");
          n1 = new nodoAST("--", "decremento", null, n3);
      } else if (jj_2_72(2147483647)) {
        n1 = BUCLES();
      } else if (jj_2_73(2147483647)) {
        n1 = WRITE();
      } else if (jj_2_74(2147483647)) {
        n1 = ASIGNACION();
      } else if (jj_2_75(2147483647)) {
        n1 = DECLARACION();
      } else if (jj_2_76(2147483647)) {
        n1 = FLUJO();
      } else if (jj_2_77(2147483647)) {
        n1 = METODO_FUNCION();
      } else if (jj_2_78(2147483647)) {
        n1 = K();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case returnT:{
          jj_consume_token(returnT);
          n3 = EXPRESION();
n1 = new nodoAST("return", "return", null, n3);
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
if(n2 == null){
        n2 = new nodoAST("body", "body", null, n1);
      }else{
        n2.addHijo(n1);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comillaT:
      case switchT:
      case trueT:
      case falseT:
      case loopT:
      case doT:
      case returnT:
      case writeT:
      case subT:
      case functionT:
      case forT:
      case whileT:
      case ifT:
      case resultTNum:
      case DEC:
      case NUM:
      case CHAR:
      case identifier:
      case 68:
      case 82:
      case 83:
      case 85:{
        ;
        break;
        }
      default:
        jj_la1[87] = jj_gen;
        break label_33;
      }
    }
    jj_consume_token(endT);
    jj_consume_token(functionT);
nodo.addHijo(n2);
    {if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST ASIGNACION() throws ParseException {nodoAST n1 = null, nodo = null;
    n1 = K();
    jj_consume_token(62);
    nodo = EXPRESION();
nodo = new nodoAST("=", "asignacion", null, n1, nodo);
      {if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST WRITE() throws ParseException {nodoAST nodo = null, n1 = null;
    jj_consume_token(writeT);
    jj_consume_token(68);
    n1 = EXPRESION();
    jj_consume_token(70);
nodo = new nodoAST("write", "write", null, n1);
    System.out.println("write that");
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST BUCLES() throws ParseException {nodoAST nodo = null;
System.out.println("bucles");
    if (jj_2_79(2147483647)) {
      nodo = DOUNTIL();
    } else if (jj_2_80(2147483647)) {
      nodo = WHILE();
    } else if (jj_2_81(2147483647)) {
      nodo = LOOP();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case forT:{
        nodo = FOR();
        break;
        }
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST WHILE() throws ParseException {nodoAST n3 = null, condicion = null, n1 = null, n2 = null, nodo = null;
    jj_consume_token(whileT);
    condicion = EXPRESION();
    label_34:
    while (true) {
      if (jj_2_82(2147483647)) {
        n3 = K();
        jj_consume_token(66);
System.out.println("++");
        n1 = new nodoAST("++", "aumento", null, n3);
      } else if (jj_2_83(2147483647)) {
        n3 = K();
        jj_consume_token(67);
System.out.println("--");
        n1 = new nodoAST("--", "decremento", null, n3);
      } else if (jj_2_84(2147483647)) {
        n1 = BUCLES();
      } else if (jj_2_85(2147483647)) {
        n1 = WRITE();
      } else if (jj_2_86(2147483647)) {
        n1 = ASIGNACION();
      } else if (jj_2_87(2147483647)) {
        n1 = DECLARACION();
      } else if (jj_2_88(2147483647)) {
        n1 = FLUJO();
      } else if (jj_2_89(2147483647)) {
        n1 = METODO_FUNCION();
      } else if (jj_2_90(2147483647)) {
        n1 = K();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case returnT:{
          jj_consume_token(returnT);
          n3 = EXPRESION();
n1 = new nodoAST("return", "return", null, n3);
          break;
          }
        case breakT:{
          jj_consume_token(breakT);
n1 = new nodoAST("break", "break", null);
          break;
          }
        default:
          jj_la1[89] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
if(n2 == null){
        n2 = new nodoAST("body", "body", null, n1);
      }else{
        n2.addHijo(n1);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comillaT:
      case switchT:
      case trueT:
      case falseT:
      case loopT:
      case doT:
      case returnT:
      case writeT:
      case subT:
      case functionT:
      case forT:
      case whileT:
      case breakT:
      case ifT:
      case resultTNum:
      case DEC:
      case NUM:
      case CHAR:
      case identifier:
      case 68:
      case 82:
      case 83:
      case 85:{
        ;
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        break label_34;
      }
    }
    jj_consume_token(endWhileT);
nodo = new nodoAST("while","while", null, condicion, n2);
    {if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST DOUNTIL() throws ParseException {nodoAST n3 = null, condicion = null, n1 = null, n2 = null, nodo = null;
    jj_consume_token(doT);
    label_35:
    while (true) {
      if (jj_2_91(2147483647)) {
        n3 = K();
        jj_consume_token(66);
System.out.println("++");
        n1 = new nodoAST("++", "aumento", null, n3);
      } else if (jj_2_92(2147483647)) {
        n3 = K();
        jj_consume_token(67);
System.out.println("--");
        n1 = new nodoAST("--", "decremento", null, n3);
      } else if (jj_2_93(2147483647)) {
        n1 = BUCLES();
      } else if (jj_2_94(2147483647)) {
        n1 = WRITE();
      } else if (jj_2_95(2147483647)) {
        n1 = ASIGNACION();
      } else if (jj_2_96(2147483647)) {
        n1 = DECLARACION();
      } else if (jj_2_97(2147483647)) {
        n1 = FLUJO();
      } else if (jj_2_98(2147483647)) {
        n1 = METODO_FUNCION();
      } else if (jj_2_99(2147483647)) {
        n1 = K();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case returnT:{
          jj_consume_token(returnT);
          n3 = EXPRESION();
n1 = new nodoAST("return", "return", null, n3);
          break;
          }
        case breakT:{
          jj_consume_token(breakT);
n1 = new nodoAST("break", "break", null);
          break;
          }
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
if(n2 == null){
        n2 = new nodoAST("body", "body", null, n1);
      }else{
        n2.addHijo(n1);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comillaT:
      case switchT:
      case trueT:
      case falseT:
      case loopT:
      case doT:
      case returnT:
      case writeT:
      case subT:
      case functionT:
      case forT:
      case whileT:
      case breakT:
      case ifT:
      case resultTNum:
      case DEC:
      case NUM:
      case CHAR:
      case identifier:
      case 68:
      case 82:
      case 83:
      case 85:{
        ;
        break;
        }
      default:
        jj_la1[92] = jj_gen;
        break label_35;
      }
    }
    jj_consume_token(untilT);
    condicion = EXPRESION();
nodo = new nodoAST("dountil","dountil", null, condicion, n2);
    {if ("" != null) return nodo;}
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST LOOP() throws ParseException {nodoAST n3 = null, condicion = null, n1 = null, n2 = null, nodo = null;
    jj_consume_token(loopT);
    label_36:
    while (true) {
      if (jj_2_100(2147483647)) {
        n3 = K();
        jj_consume_token(66);
System.out.println("++");
        n1 = new nodoAST("++", "aumento", null, n3);
      } else if (jj_2_101(2147483647)) {
        n3 = K();
        jj_consume_token(67);
System.out.println("--");
        n1 = new nodoAST("--", "decremento", null, n3);
      } else if (jj_2_102(2147483647)) {
        n1 = BUCLES();
      } else if (jj_2_103(2147483647)) {
        n1 = WRITE();
      } else if (jj_2_104(2147483647)) {
        n1 = ASIGNACION();
      } else if (jj_2_105(2147483647)) {
        n1 = DECLARACION();
      } else if (jj_2_106(2147483647)) {
        n1 = FLUJO();
      } else if (jj_2_107(2147483647)) {
        n1 = METODO_FUNCION();
      } else if (jj_2_108(2147483647)) {
        n1 = K();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case returnT:{
          jj_consume_token(returnT);
          n3 = EXPRESION();
n1 = new nodoAST("return", "return", null, n3);
          break;
          }
        case breakT:{
          jj_consume_token(breakT);
n1 = new nodoAST("break", "break", null);
          break;
          }
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
if(n2 == null){
        n2 = new nodoAST("body", "body", null, n1);
      }else{
        n2.addHijo(n1);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comillaT:
      case switchT:
      case trueT:
      case falseT:
      case loopT:
      case doT:
      case returnT:
      case writeT:
      case subT:
      case functionT:
      case forT:
      case whileT:
      case breakT:
      case ifT:
      case resultTNum:
      case DEC:
      case NUM:
      case CHAR:
      case identifier:
      case 68:
      case 82:
      case 83:
      case 85:{
        ;
        break;
        }
      default:
        jj_la1[94] = jj_gen;
        break label_36;
      }
    }
    jj_consume_token(endLoopT);
nodo = new nodoAST("loop","loop", null, n2);
    {if ("" != null) return nodo;}
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodoAST FOR() throws ParseException {nodoAST n2 = null, n1 = null, nodo = null, n3 = null; int salto = 1, negativo = 0; Token t, t1, inf, sup;
    jj_consume_token(forT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case identifier:{
      t1 = jj_consume_token(identifier);
      break;
      }
    case CHAR:{
      t1 = jj_consume_token(CHAR);
      break;
      }
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(62);
    inf = jj_consume_token(NUM);
    jj_consume_token(toT);
    sup = jj_consume_token(NUM);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case stepT:{
      jj_consume_token(stepT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 77:{
        jj_consume_token(77);
negativo = 1;
        break;
        }
      default:
        jj_la1[96] = jj_gen;
        ;
      }
      t = jj_consume_token(NUM);
if(negativo == 1){
      salto = (-1) * (Integer.parseInt(t.image));
    }else{
      salto = Integer.parseInt(t.image);
    }
      break;
      }
    default:
      jj_la1[97] = jj_gen;
      ;
    }
    label_37:
    while (true) {
      if (jj_2_109(2147483647)) {
        n3 = K();
        jj_consume_token(66);
System.out.println("++");
        n1 = new nodoAST("++", "aumento", null, n3);
      } else if (jj_2_110(2147483647)) {
        n3 = K();
        jj_consume_token(67);
System.out.println("--");
        n1 = new nodoAST("--", "decremento", null, n3);
      } else if (jj_2_111(2147483647)) {
        n1 = BUCLES();
      } else if (jj_2_112(2147483647)) {
        n1 = WRITE();
      } else if (jj_2_113(2147483647)) {
        n1 = ASIGNACION();
      } else if (jj_2_114(2147483647)) {
        n1 = DECLARACION();
      } else if (jj_2_115(2147483647)) {
        n1 = FLUJO();
      } else if (jj_2_116(2147483647)) {
        n1 = METODO_FUNCION();
      } else if (jj_2_117(2147483647)) {
        n1 = K();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case returnT:{
          jj_consume_token(returnT);
          n3 = EXPRESION();
n1 = new nodoAST("return", "return", null, n3);
          break;
          }
        case breakT:{
          jj_consume_token(breakT);
n1 = new nodoAST("break", "break", null);
          break;
          }
        default:
          jj_la1[98] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
if(n2 == null){
        n2 = new nodoAST("body", "body", null, n1);
      }else{
        n2.addHijo(n1);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comillaT:
      case switchT:
      case trueT:
      case falseT:
      case loopT:
      case doT:
      case returnT:
      case writeT:
      case subT:
      case functionT:
      case forT:
      case whileT:
      case breakT:
      case ifT:
      case resultTNum:
      case DEC:
      case NUM:
      case CHAR:
      case identifier:
      case 68:
      case 82:
      case 83:
      case 85:{
        ;
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        break label_37;
      }
    }
    jj_consume_token(nextT);
nodo = new nodoAST("for", "for", null, new nodoAST(t1.image, "identifier", t1.image), new nodoAST(inf.image, "num", Integer.parseInt(inf.image)), new nodoAST(sup.image, "num", Integer.parseInt(sup.image)), n2);
    nodo.setSalto(salto);
    {if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public int TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case intT:{
      jj_consume_token(intT);
{if ("" != null) return 1;}
      break;
      }
    case doubleT:{
      jj_consume_token(doubleT);
{if ("" != null) return 2;}
      break;
      }
    case stringT:{
      jj_consume_token(stringT);
{if ("" != null) return 3;}
      break;
      }
    case charT:{
      jj_consume_token(charT);
{if ("" != null) return 4;}
      break;
      }
    case boolT:{
      jj_consume_token(boolT);
{if ("" != null) return 5;}
      break;
      }
    case floatT:{
      jj_consume_token(floatT);
{if ("" != null) return 2;}
      break;
      }
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_3R_245()
 {
    if (jj_scan_token(76)) return true;
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_244()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_243()
 {
    if (jj_scan_token(74)) return true;
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_242()
 {
    if (jj_scan_token(73)) return true;
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_241()
 {
    if (jj_scan_token(72)) return true;
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_240()
 {
    if (jj_scan_token(71)) return true;
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_236()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_222()
 {
    if (jj_3R_235()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_221()
 {
    if (jj_scan_token(notT)) return true;
    return false;
  }

  private boolean jj_3R_192()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_221()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_193()
 {
    if (jj_scan_token(andT)) return true;
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_3R_192()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(floatT)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(boolT)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(charT)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(stringT)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(doubleT)) return true;
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_scan_token(xorT)) return true;
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_scan_token(intT)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_3R_161()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_117()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_116()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_115()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_scan_token(orT)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3_114()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_scan_token(breakT)) return true;
    return false;
  }

  private boolean jj_3_113()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_scan_token(returnT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_112()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_111()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_110()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_170()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_169()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_109()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(68)) return true;
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(70)) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    Token xsp;
    if (jj_3R_156()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_156()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_166()
 {
    if (jj_scan_token(77)) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(69)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    return false;
  }

  private boolean jj_3R_65()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  private boolean jj_3R_84()
 {
    Token xsp;
    if (jj_3R_155()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_155()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(stepT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) jj_scanpos = xsp;
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_scan_token(asToken)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(forT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_scan_token(62)) return true;
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(toT)) return true;
    if (jj_scan_token(NUM)) return true;
    xsp = jj_scanpos;
    if (jj_3R_153()) jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_154()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(nextT)) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_108()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_107()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_106()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_234()
 {
    if (jj_scan_token(breakT)) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_scan_token(breakT)) return true;
    return false;
  }

  private boolean jj_3R_233()
 {
    if (jj_scan_token(returnT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_219()
 {
    if (jj_scan_token(defaultT)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3_105()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_scan_token(returnT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_232()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_104()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_231()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_103()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_230()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_102()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_229()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_228()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_227()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_101()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_226()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3_100()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_225()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_218()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_224()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_220()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_191()
 {
    if (jj_scan_token(caseT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    if (jj_3R_220()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_220()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(loopT)) return true;
    Token xsp;
    if (jj_3R_80()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(endLoopT)) return true;
    return false;
  }

  private boolean jj_3_99()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3_98()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(switchT)) return true;
    if (jj_3R_69()) return true;
    Token xsp;
    if (jj_3R_160()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(endSwitchT)) return true;
    return false;
  }

  private boolean jj_3_97()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(breakT)) return true;
    return false;
  }

  private boolean jj_3_96()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(returnT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_95()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_94()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_93()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_217()
 {
    if (jj_scan_token(breakT)) return true;
    return false;
  }

  private boolean jj_3R_216()
 {
    if (jj_scan_token(returnT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_215()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_92()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_214()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_213()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_212()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_91()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_211()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_210()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_209()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_208()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_207()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(doT)) return true;
    Token xsp;
    if (jj_3R_78()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(untilT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_190()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_90()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_scan_token(elseT)) return true;
    Token xsp;
    if (jj_3R_190()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_89()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_88()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(breakT)) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_87()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(returnT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_86()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_206()
 {
    if (jj_scan_token(breakT)) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_205()
 {
    if (jj_scan_token(returnT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_85()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_204()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_84()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_203()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_202()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_201()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_83()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_200()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_199()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_198()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3_82()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_197()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_196()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3_81()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_80()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_189()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(whileT)) return true;
    if (jj_3R_69()) return true;
    Token xsp;
    if (jj_3R_79()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(endWhileT)) return true;
    return false;
  }

  private boolean jj_3_79()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(elseifT)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(thenT)) return true;
    Token xsp;
    if (jj_3R_189()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_188()
 {
    if (jj_scan_token(breakT)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_187()
 {
    if (jj_scan_token(returnT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_186()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_185()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_183()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(writeT)) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(70)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_182()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_180()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_179()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3_78()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_77()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3_76()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_75()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_74()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_scan_token(returnT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_73()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(ifT)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(thenT)) return true;
    Token xsp;
    if (jj_3R_157()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_157()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_158()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    if (jj_scan_token(endIfT)) return true;
    return false;
  }

  private boolean jj_3_72()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_71()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_70()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(69)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_scan_token(asToken)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_scan_token(asToken)) return true;
    if (jj_3R_66()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(functionT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_scan_token(68)) return true;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    if (jj_scan_token(asToken)) return true;
    if (jj_3R_66()) return true;
    if (jj_3R_77()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(endT)) return true;
    if (jj_scan_token(functionT)) return true;
    return false;
  }

  private boolean jj_3_69()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_68()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_67()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_66()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_65()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(returnT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_64()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_63()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_61()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(69)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_scan_token(asToken)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_scan_token(asToken)) return true;
    if (jj_3R_66()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(subT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_scan_token(68)) return true;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    if (jj_3R_75()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(endT)) return true;
    if (jj_scan_token(subT)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_223()
 {
    if (jj_scan_token(68)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(70)) return true;
    return false;
  }

  private boolean jj_3R_195()
 {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_194()
 {
    if (jj_scan_token(85)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(86)) return true;
    return false;
  }

  private boolean jj_3R_165()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_3R_165()) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_scan_token(83)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(84)) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(comillaT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(comillaT)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(identifier)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(82)) return true;
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(falseT)) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(trueT)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_scan_token(69)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(68)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_3R_44()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(81)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(resultTNum)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_253()
 {
    if (jj_scan_token(80)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_249()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_255()
 {
    if (jj_scan_token(79)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_254()
 {
    if (jj_scan_token(78)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_250()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) return true;
    }
    return false;
  }

  private boolean jj_3R_247()
 {
    if (jj_3R_249()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_250()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_252()
 {
    if (jj_scan_token(77)) return true;
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_251()
 {
    if (jj_scan_token(63)) return true;
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_248()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) return true;
    }
    return false;
  }

  private boolean jj_3R_246()
 {
    if (jj_3R_247()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_248()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_239()
 {
    if (jj_3R_246()) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_238()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_237()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_235()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) return true;
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public analisisTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[101];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x4041015e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x4053015e,0x4,0x80000200,0xc053035e,0x0,0x80000200,0xc053035e,0x80000200,0xc053035e,0x0,0x2000000,0x400401a,0x80000200,0xc053035e,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x10000000,0x8000,0x4000,0x0,0x0,0x1a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x401a,0x0,0x0,0x18,0x0,0xfffffdfc,0xfffffdfc,0xfffffdfc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x4053035e,0x0,0x0,0x0,0x0,0x0,0x200,0x4053035e,0x400000,0x80000200,0xc053035e,0x80000200,0xc053035e,0x80000200,0xc053035e,0x0,0x0,0x1000000,0x80000200,0xc053035e,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000,0x600000,0x600000,0x600000,0x8,0x80000000,0x600000,0x8,0x0,0x600000,0x8,0x80000000,0x600000,0x8,0x0,0x7c0001,0x600000,0x30000,0x600000,0x0,0x600000,0x30000,0x6000,0x600000,0x0,0x600000,0x0,0x6000,0x7c0001,0x1,0x0,0x7c0001,0x2,0x0,0x7c0001,0x0,0x7c0001,0x10,0x0,0x7c0000,0x0,0x7c0001,0x600000,0x600000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7c0000,0x80000000,0x80000000,0x0,0x0,0x0,0x600000,0x0,0x600000,0x0,0x7c0000,0x0,0x40000,0x0,0x580000,0x700ff3,0x700ff3,0x700ff3,0x0,0x0,0x600000,0x600000,0x0,0x600000,0x600000,0x0,0x7c0001,0x600000,0x600000,0x0,0x600000,0x600000,0x0,0x7c0001,0x0,0x0,0x7c0001,0x0,0x7c0001,0x0,0x7c0001,0x600000,0x0,0x0,0x0,0x7c0001,0x7e0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x2c0010,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x2c0010,0x0,0x0,0x2c0010,0x0,0x0,0x2c0010,0x0,0x2c0010,0x0,0x0,0x2c0010,0x0,0x2c0010,0x0,0x0,0x20,0x10,0x30,0x30,0x0,0x0,0x0,0x0,0x1f80,0x1f80,0x2c0010,0x2000,0x2000,0xc000,0xc000,0x10000,0x0,0x20000,0x0,0x20,0x2c0010,0x10,0x0,0x40000,0x280010,0x0,0x0,0x0,0x280010,0x200010,0x0,0x0,0x20,0x0,0x0,0x0,0x2c0010,0x0,0x0,0x20,0x0,0x0,0x0,0x2c0010,0x0,0x0,0x2c0010,0x0,0x2c0010,0x0,0x2c0010,0x0,0x2000,0x0,0x0,0x2c0010,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[117];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public analisis(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public analisis(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new analisisTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 101; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 101; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public analisis(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new analisisTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 101; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 101; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public analisis(analisisTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 101; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(analisisTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 101; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[87];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 101; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 87; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 117; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
